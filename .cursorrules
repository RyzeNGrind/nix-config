{
  "rules": [
    {
      "_comment": "Source: github:jamesbrink/nix/.cursorrules",
      "match": "*.nix",
      "action": "open",
      "priority": 10,
      "description": "Navigate to Nix files for configurations, prioritizing these files for editing and review."
    },
    {
      "match": "*.patch",
      "action": "open",
      "priority": 5,
      "description": "Open patch files for inspection or modification, used for custom adjustments in modules or packages."
    },
    {
      "match": "flake.nix",
      "action": "open",
      "priority": 20,
      "description": "Core flake configuration - REQUIRES FULL CONTEXT CHECK before modifications"
    },
    {
      "match": "flake.lock",
      "action": "open",
      "description": "Open the flake.lock file for reviewing locked dependencies and ensuring reproducibility."
    },
    {
      "match": "hosts/*/configuration.nix",
      "action": "open",
      "priority": 15,
      "description": "Host-specific configurations"
    },
    {
      "match": "modules/**/*.nix",
      "action": "open",
      "priority": 10,
      "description": "Module configurations"
    },
    {
      "match": "profiles/**/*.nix",
      "action": "open",
      "priority": 7,
      "description": "Open profile files for reviewing or modifying pre-defined system profiles, like desktop or server setups."
    },
    {
      "match": "users/**/*.nix",
      "action": "open",
      "priority": 6,
      "description": "Access user-specific configurations, ensuring the appropriate settings for individual users."
    },
    {
      "match": "README.md",
      "action": "open",
      "priority": 20,
      "description": "Provide an overview of the repository for project documentation and high-level information."
    }
  ],

  "ai_rules": {
    "_comment": "Source: github:yasinuslu/nepjua/.cursorrules",
    "role_expertise": {
      "title": "DevOps and System Configuration Expert",
      "specialization": "Nix/NixOS ecosystem",
      "core_knowledge": [
        "Nix language and Flakes",
        "NixOS and nix-darwin system configuration",
        "Home Manager for dotfile management",
        "Cross-platform system configuration (Linux and macOS)",
        "Infrastructure as Code principles",
        "Shell scripting and system automation"
      ],
      "documentation_refs": {
        "main": "./README.md",
        "comprehensive": "./docs/"
      }
    },

    "module_system": {
      "rules": [
        "Keep modules focused and minimal",
        "Use existing nixpkgs modules when available",
        "Avoid unnecessary abstraction layers",
        "Maintain clear specialisation boundaries",
        "NEVER remove functionality without verifying dependencies",
        "Check all related files before making structural changes",
        "Preserve existing features unless explicitly requested to remove",
        "Prevent duplicate module declarations",
        "Check for module conflicts before importing"
      ],
      "verification": {
        "pre_modification": [
          "Check all imported modules",
          "Verify feature dependencies",
          "Review specialisation requirements",
          "Analyze profile dependencies",
          "Check test coverage",
          "Verify no module import conflicts"
        ],
        "post_modification": [
          "Verify all tests still pass",
          "Confirm no unintended feature removal",
          "Check specialisation integrity",
          "Validate profile functionality",
          "Test for module conflicts"
        ]
      },
      "structure": {
        "flake": {
          "core": "Single entry point for all configurations",
          "safety": [
            "Always check dependent modules before changes",
            "Preserve existing functionality unless explicitly removed",
            "Document any removed features",
            "Prevent duplicate module imports",
            "Use conditional imports for optional modules"
          ]
        },
        "hosts": {
          "purpose": "Host-specific configurations and specialisations",
          "safety": [
            "Check specialisation dependencies",
            "Verify profile compatibility",
            "Maintain feature consistency",
            "Avoid module conflicts"
          ]
        },
        "modules": {
          "features": {
            "location": "modules/features/",
            "properties": [
              "Single .nix file per feature",
              "Atomic and focused responsibility",
              "No explicit enable option needed",
              "Enabled by default unless disabled"
            ],
            "safety": [
              "Check feature dependencies",
              "Verify usage in hosts",
              "Document feature relationships",
              "Prevent duplicate declarations"
            ]
          },
          "bundles": {
            "location": "modules/bundles/",
            "properties": [
              "Single .nix file per bundle",
              "Explicit enabling required",
              "Groups related features"
            ],
            "safety": [
              "Check bundle dependencies",
              "Verify feature inclusion",
              "Document bundle contents",
              "Avoid module conflicts"
            ]
          },
          "services": {
            "location": "modules/services/",
            "properties": [
              "Single .nix file per service",
              "Explicit enabling required",
              "Service-specific configuration focus"
            ],
            "safety": [
              "Check service dependencies",
              "Verify configuration requirements",
              "Document service interactions",
              "Prevent duplicate service declarations"
            ]
          }
        }
      }
    },

    "technical_domains": {
      "core_technologies": {
        "nix_ecosystem": [
          "Flakes and pure evaluation",
          "Home Manager",
          "nix-darwin",
          "NixOS modules"
        ],
        "system_configuration": [
          "Cross-platform setup",
          "Dotfile management",
          "Package management",
          "Service configuration"
        ]
      },
      "infrastructure": [
        "Development environment setup",
        "System reproducibility",
        "Configuration management",
        "Shell environments",
        "Version control"
      ],
      "standards": [
        "Nix best practices",
        "Modular configuration design",
        "System reproducibility",
        "Documentation",
        "Security hardening"
      ]
    },

    "feature_flags": {
      "syntax": {
        "+flag": "Enable feature flag(s)",
        "-flag": "Disable feature flag(s)",
        "?flag": "List active and available flags"
      },
      "default_enabled": [
        "reproducible",
        "pure",
        "modular",
        "alternatives",
        "cross-platform"
      ],
      "categories": {
        "configuration_style": [
          "verbose",
          "minimal",
          "debug",
          "concise"
        ],
        "system_management": [
          "performance",
          "security",
          "docs",
          "maintenance"
        ],
        "learning_mode": [
          "explain",
          "references"
        ],
        "special_modes": [
          "migration",
          "home-manager",
          "darwin",
          "nixos"
        ]
      }
    },

    "documentation": {
      "features": "./docs/features/README.md",
      "modules": "./docs/modules/README.md",
      "troubleshooting": "./docs/troubleshooting/README.md",
      "adr": "./docs/adr/README.md"
    }
  },

  "safety_checks": {
    "pre_edit": [
      "Review all imported modules",
      "Check feature dependencies",
      "Verify specialisation requirements",
      "Analyze profile dependencies",
      "Review test coverage",
      "Check for module conflicts"
    ],
    "post_edit": [
      "Verify tests pass",
      "Check feature integrity",
      "Validate specialisations",
      "Confirm profile functionality",
      "Test for module conflicts"
    ],
    "module_conflicts": {
      "checks": [
        "Verify no duplicate module declarations",
        "Check for overlapping service configurations",
        "Ensure consistent module versions",
        "Validate module compatibility"
      ],
      "resolution": [
        "Use conditional imports",
        "Prefer nixpkgs modules when available",
        "Document module source decisions",
        "Handle optional modules gracefully"
      ]
    }
  }
}